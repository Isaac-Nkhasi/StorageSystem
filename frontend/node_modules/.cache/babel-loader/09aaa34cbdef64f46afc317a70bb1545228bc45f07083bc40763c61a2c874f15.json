{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials)\n};\n\n// Add to your existing authAPI and reportsAPI objects:\n\nexport const classesAPI = {\n  getAll: () => api.get('/classes')\n};\nexport const coursesAPI = {\n  getAll: () => api.get('/courses')\n};\n\n// Add to your existing API exports:\n\nexport const ratingsAPI = {\n  submit: ratingData => api.post('/ratings', ratingData),\n  getByReport: reportId => api.get(`/ratings/report/${reportId}`),\n  getByStudent: studentId => api.get(`/ratings/student/${studentId}`)\n};\nexport const reportsAPI = {\n  getAll: () => api.get('/reports'),\n  getMyReports: lecturerId => api.get(`/reports/my-reports?lecturer_id=${lecturerId}`),\n  getById: id => api.get(`/reports/${id}`),\n  getStudentReports: faculty => api.get(`/reports/student-reports?faculty=${faculty}`),\n  getStudentReport: id => api.get(`/reports/student/${id}`),\n  create: reportData => api.post('/reports', reportData)\n};\n\n// Add to your existing API exports:\n\nexport const principalAPI = {\n  getCourses: faculty => api.get(`/principal/courses?faculty=${faculty}`),\n  getReports: faculty => api.get(`/principal/reports?faculty=${faculty}`),\n  getStatistics: faculty => api.get(`/principal/statistics?faculty=${faculty}`),\n  getLecturers: faculty => api.get(`/principal/lecturers?faculty=${faculty}`),\n  addFeedback: (reportId, feedback) => api.post(`/principal/reports/${reportId}/feedback`, {\n    feedback\n  })\n};\n\n// Add to your existing API exports:\n\nexport const programLeaderAPI = {\n  getCourses: () => api.get('/program-leader/courses'),\n  createCourse: courseData => api.post('/program-leader/courses', courseData),\n  assignLecturer: (courseId, lecturerId) => api.put(`/program-leader/courses/${courseId}/assign-lecturer`, {\n    lecturer_id: lecturerId\n  }),\n  getReports: () => api.get('/program-leader/reports'),\n  getLecturers: () => api.get('/program-leader/lecturers'),\n  getClasses: () => api.get('/program-leader/classes'),\n  getStatistics: () => api.get('/program-leader/statistics'),\n  // Use the general /courses/:id endpoint for deletion for reliability\n  deleteCourse: courseId => api.delete(`/courses/${courseId}`)\n};\n\n// Search API\nexport const searchAPI = {\n  global: (query, role, userId) => api.get(`/search/global?query=${encodeURIComponent(query)}&role=${role}&userId=${userId}`),\n  reports: query => api.get(`/search/reports?query=${encodeURIComponent(query)}`),\n  courses: query => api.get(`/search/courses?query=${encodeURIComponent(query)}`)\n};\n\n// Export API\nexport const exportAPI = {\n  reports: (params = '') => {\n    const url = `/export/reports${params ? `?${params}` : ''}`;\n    return api.get(url, {\n      responseType: 'blob'\n    });\n  },\n  courses: () => api.get('/export/courses', {\n    responseType: 'blob'\n  }),\n  ratings: (faculty = '') => {\n    const url = `/export/ratings${faculty ? `?faculty=${faculty}` : ''}`;\n    return api.get(url, {\n      responseType: 'blob'\n    });\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","authAPI","register","userData","post","login","credentials","classesAPI","getAll","get","coursesAPI","ratingsAPI","submit","ratingData","getByReport","reportId","getByStudent","studentId","reportsAPI","getMyReports","lecturerId","getById","id","getStudentReports","faculty","getStudentReport","reportData","principalAPI","getCourses","getReports","getStatistics","getLecturers","addFeedback","feedback","programLeaderAPI","createCourse","courseData","assignLecturer","courseId","put","lecturer_id","getClasses","deleteCourse","delete","searchAPI","global","query","role","userId","encodeURIComponent","reports","courses","exportAPI","params","url","responseType","ratings"],"sources":["C:/New folder (2)/isaac2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\n// Add token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n};\r\n\r\n// Add to your existing authAPI and reportsAPI objects:\r\n\r\nexport const classesAPI = {\r\n  getAll: () => api.get('/classes'),\r\n};\r\n\r\nexport const coursesAPI = {\r\n  getAll: () => api.get('/courses'),\r\n};\r\n\r\n// Add to your existing API exports:\r\n\r\nexport const ratingsAPI = {\r\n  submit: (ratingData) => api.post('/ratings', ratingData),\r\n  getByReport: (reportId) => api.get(`/ratings/report/${reportId}`),\r\n  getByStudent: (studentId) => api.get(`/ratings/student/${studentId}`),\r\n};\r\n\r\nexport const reportsAPI = {\r\n  getAll: () => api.get('/reports'),\r\n  getMyReports: (lecturerId) => api.get(`/reports/my-reports?lecturer_id=${lecturerId}`),\r\n  getById: (id) => api.get(`/reports/${id}`),\r\n  getStudentReports: (faculty) => api.get(`/reports/student-reports?faculty=${faculty}`),\r\n  getStudentReport: (id) => api.get(`/reports/student/${id}`),\r\n  create: (reportData) => api.post('/reports', reportData),\r\n};\r\n\r\n// Add to your existing API exports:\r\n\r\nexport const principalAPI = {\r\n  getCourses: (faculty) => api.get(`/principal/courses?faculty=${faculty}`),\r\n  getReports: (faculty) => api.get(`/principal/reports?faculty=${faculty}`),\r\n  getStatistics: (faculty) => api.get(`/principal/statistics?faculty=${faculty}`),\r\n  getLecturers: (faculty) => api.get(`/principal/lecturers?faculty=${faculty}`),\r\n  addFeedback: (reportId, feedback) => api.post(`/principal/reports/${reportId}/feedback`, { feedback }),\r\n};\r\n\r\n// Add to your existing API exports:\r\n\r\nexport const programLeaderAPI = {\r\n  getCourses: () => api.get('/program-leader/courses'),\r\n  createCourse: (courseData) => api.post('/program-leader/courses', courseData),\r\n  assignLecturer: (courseId, lecturerId) => api.put(`/program-leader/courses/${courseId}/assign-lecturer`, { lecturer_id: lecturerId }),\r\n  getReports: () => api.get('/program-leader/reports'),\r\n  getLecturers: () => api.get('/program-leader/lecturers'),\r\n  getClasses: () => api.get('/program-leader/classes'),\r\n  getStatistics: () => api.get('/program-leader/statistics'),\r\n  // Use the general /courses/:id endpoint for deletion for reliability\r\n  deleteCourse: (courseId) => api.delete(`/courses/${courseId}`),\r\n};\r\n\r\n// Search API\r\nexport const searchAPI = {\r\n  global: (query, role, userId) => api.get(`/search/global?query=${encodeURIComponent(query)}&role=${role}&userId=${userId}`),\r\n  reports: (query) => api.get(`/search/reports?query=${encodeURIComponent(query)}`),\r\n  courses: (query) => api.get(`/search/courses?query=${encodeURIComponent(query)}`),\r\n};\r\n\r\n// Export API\r\nexport const exportAPI = {\r\n  reports: (params = '') => {\r\n    const url = `/export/reports${params ? `?${params}` : ''}`;\r\n    return api.get(url, { responseType: 'blob' });\r\n  },\r\n  courses: () => api.get('/export/courses', { responseType: 'blob' }),\r\n  ratings: (faculty = '') => {\r\n    const url = `/export/ratings${faculty ? `?faculty=${faculty}` : ''}`;\r\n    return api.get(url, { responseType: 'blob' });\r\n  },\r\n};\r\n\r\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}